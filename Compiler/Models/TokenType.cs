namespace Compiler.Models
{
    public enum TokenType
    {
        Unknown = 0,

        Abstract,
        Assert,
        Assignment,
        BitwiseLeftShift,
        BitwiseLeftShiftEqual,
        BitwiseRightShift,
        BitwiseRightShiftEqual,
        Boolean,
        BooleanAnd,
        BooleanEqual,
        BooleanNot,
        BooleanOr,
        Break,
        Byte,
        Case,
        Catch,
        Char,
        Class,
        CloseCurlyBrace,
        CloseParen,
        CloseSquareBracket,
        Colon,
        Comma,
        Const,
        Continue,
        Default,
        Divide,
        DivideEqual,
        Do,
        Dot,
        Double,
        DoubleQuote,
        Else,
        Enum,
        Extends,
        False,
        Final,
        Finally,
        Float,
        For,
        Goto,
        GreaterThan,
        GreaterThanOrEqual,
        Identifier,
        If,
        Implements,
        Import,
        Instanceof,
        Int,
        Interface,
        Length,
        LessThan,
        LessThanOrEqual,
        LiteralBoolean,
        LiteralInteger,
        LiteralReal,
        LiteralString,
        LogicalAnd,
        LogicalAndEqual,
        LogicalExclusiveOr,
        LogicalExclusiveOrEqual,
        LogicalNot,
        LogicalOr,
        LogicalOrEqual,
        Long,
        Main,
        Minus,
        MinusEqual,
        MinusMinus,
        Modulo,
        ModuloEqual,
        Multiplication,
        MultiplicationEqual,
        Native,
        New,
        NotEqual,
        OpenCurlyBrace,
        OpenParen,
        OpenSquareBracket,
        Package,
        Plus,
        PlusEqual,
        PlusPlus,
        Private,
        Protected,
        Public,
        QuestionMark,
        Return,
        Semicolon,
        Short,
        Static,
        Strictfp,
        String,
        Super,
        Switch,
        Synchronized,
        SystemOutPrintln,
        This,
        Throw,
        Throws,
        Transient,
        True,
        Try,
        UnsignedLeftShift,
        UnsignedLeftShiftEqual,
        Void,
        Volatile,
        While,
    }
}